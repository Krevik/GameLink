datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  username  String   @unique
  steamId   String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      UserRole @default(USER)

  profile            Profile?
  sentMessages       Message[]            @relation("SentMessages")
  UserOnConversation UserOnConversation[]
  MessageReadReceipt MessageReadReceipt[]

  friendsSent     Friend[] @relation("friendsSent")
  friendsReceived Friend[] @relation("friendsReceived")
}

model GameInfo {
  id                Int     @id
  alternative_names Int[]   @default([])
  category          Int?
  created_at        Int?
  dlcs              Int[]   @default([])
  expanded_games    Int[]   @default([])
  genres            Int[]   @default([])
  name              String
  platforms         Int[]   @default([])
  aggregated_rating Float?
  cover             Int?
  total_rating      Float?
  image_id          String?
  img_url           String?
  summary           String?
  similar_games     Int[]   @default([])
}

model Friend {
  id         Int      @id @default(autoincrement())
  senderId   Int
  receiverId Int
  createdAt  DateTime @default(now())
  accepted   Boolean  @default(false)

  sender   User @relation("friendsSent", fields: [senderId], references: [id])
  receiver User @relation("friendsReceived", fields: [receiverId], references: [id])

  @@unique([senderId, receiverId])
}

enum UserRole {
  USER
  ADMIN
}

model Profile {
  id                 Int      @id @default(autoincrement())
  userId             Int      @unique
  sex                SexType?
  bio                String?
  avatarUrl          String?
  platform           String?
  availability       String?
  age                Int?
  favouritePlatform  String?
  availablePlatforms String[] @default([])
  favouriteGames     String[] @default([])

  user User @relation(fields: [userId], references: [id])
}

enum SexType {
  MALE
  FEMALE
}

model Message {
  id             Int      @id @default(autoincrement())
  content        String
  senderId       Int
  conversationId Int
  createdAt      DateTime @default(now())

  sender       User                 @relation("SentMessages", fields: [senderId], references: [id])
  conversation Conversation         @relation(fields: [conversationId], references: [id])
  readReceipts MessageReadReceipt[]

  @@index([conversationId])
}

model Conversation {
  id           Int                  @id @default(autoincrement())
  createdAt    DateTime             @default(now())
  messages     Message[]
  participants UserOnConversation[]

  @@index([id])
}

model UserOnConversation {
  userId         Int
  conversationId Int
  joinedAt       DateTime @default(now())

  user         User         @relation(fields: [userId], references: [id])
  conversation Conversation @relation(fields: [conversationId], references: [id])

  @@unique([userId, conversationId])
}

model MessageReadReceipt {
  id        Int      @id @default(autoincrement())
  userId    Int
  messageId Int
  readAt    DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  message Message @relation(fields: [messageId], references: [id])

  @@unique([userId, messageId])
}
